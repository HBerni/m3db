// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: namespace.proto
// DO NOT EDIT!

/*
Package namespace is a generated protocol buffer package.

It is generated from these files:
	namespace.proto

It has these top-level messages:
	RetentionOptions
	NamespaceOptions
	Registry
*/
package namespace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RetentionOptions struct {
	RetentionPeriodNanos                     int64 `protobuf:"varint,1,opt,name=retentionPeriodNanos" json:"retentionPeriodNanos,omitempty"`
	BlockSizeNanos                           int64 `protobuf:"varint,2,opt,name=blockSizeNanos" json:"blockSizeNanos,omitempty"`
	BufferFutureNanos                        int64 `protobuf:"varint,3,opt,name=bufferFutureNanos" json:"bufferFutureNanos,omitempty"`
	BufferPastNanos                          int64 `protobuf:"varint,4,opt,name=bufferPastNanos" json:"bufferPastNanos,omitempty"`
	BlockDataExpiry                          bool  `protobuf:"varint,5,opt,name=blockDataExpiry" json:"blockDataExpiry,omitempty"`
	BlockDataExpiryAfterNotAccessPeriodNanos int64 `protobuf:"varint,6,opt,name=blockDataExpiryAfterNotAccessPeriodNanos" json:"blockDataExpiryAfterNotAccessPeriodNanos,omitempty"`
}

func (m *RetentionOptions) Reset()                    { *m = RetentionOptions{} }
func (m *RetentionOptions) String() string            { return proto.CompactTextString(m) }
func (*RetentionOptions) ProtoMessage()               {}
func (*RetentionOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NamespaceOptions struct {
<<<<<<< HEAD
	NeedsBootstrap      bool              `protobuf:"varint,1,opt,name=needsBootstrap,proto3" json:"needsBootstrap,omitempty"`
	NeedsFlush          bool              `protobuf:"varint,2,opt,name=needsFlush,proto3" json:"needsFlush,omitempty"`
	WritesToCommitLog   bool              `protobuf:"varint,3,opt,name=writesToCommitLog,proto3" json:"writesToCommitLog,omitempty"`
	NeedsFilesetCleanup bool              `protobuf:"varint,4,opt,name=needsFilesetCleanup,proto3" json:"needsFilesetCleanup,omitempty"`
	NeedsRepair         bool              `protobuf:"varint,5,opt,name=needsRepair,proto3" json:"needsRepair,omitempty"`
	RetentionOptions    *RetentionOptions `protobuf:"bytes,6,opt,name=retentionOptions" json:"retentionOptions,omitempty"`
	NeedsSnapshot       bool              `protobuf:"varint,7,opt,name=needsSnapshot,proto3" json:"needsSnapshot,omitempty"`
=======
	NeedsBootstrap      bool              `protobuf:"varint,1,opt,name=needsBootstrap" json:"needsBootstrap,omitempty"`
	NeedsFlush          bool              `protobuf:"varint,2,opt,name=needsFlush" json:"needsFlush,omitempty"`
	WritesToCommitLog   bool              `protobuf:"varint,3,opt,name=writesToCommitLog" json:"writesToCommitLog,omitempty"`
	NeedsFilesetCleanup bool              `protobuf:"varint,4,opt,name=needsFilesetCleanup" json:"needsFilesetCleanup,omitempty"`
	NeedsRepair         bool              `protobuf:"varint,5,opt,name=needsRepair" json:"needsRepair,omitempty"`
	RetentionOptions    *RetentionOptions `protobuf:"bytes,6,opt,name=retentionOptions" json:"retentionOptions,omitempty"`
	NeedsSnapshot       bool              `protobuf:"varint,7,opt,name=needsSnapshot" json:"needsSnapshot,omitempty"`
>>>>>>> Regen protobufs after rebase
}

func (m *NamespaceOptions) Reset()                    { *m = NamespaceOptions{} }
func (m *NamespaceOptions) String() string            { return proto.CompactTextString(m) }
func (*NamespaceOptions) ProtoMessage()               {}
func (*NamespaceOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NamespaceOptions) GetRetentionOptions() *RetentionOptions {
	if m != nil {
		return m.RetentionOptions
	}
	return nil
}

func (m *NamespaceOptions) GetNeedsSnapshot() bool {
	if m != nil {
		return m.NeedsSnapshot
	}
	return false
}

type Registry struct {
	Namespaces map[string]*NamespaceOptions `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Registry) Reset()                    { *m = Registry{} }
func (m *Registry) String() string            { return proto.CompactTextString(m) }
func (*Registry) ProtoMessage()               {}
func (*Registry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Registry) GetNamespaces() map[string]*NamespaceOptions {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterType((*RetentionOptions)(nil), "namespace.RetentionOptions")
	proto.RegisterType((*NamespaceOptions)(nil), "namespace.NamespaceOptions")
	proto.RegisterType((*Registry)(nil), "namespace.Registry")
}

<<<<<<< HEAD
func (m *NamespaceOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NeedsBootstrap {
		dAtA[i] = 0x8
		i++
		if m.NeedsBootstrap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedsFlush {
		dAtA[i] = 0x10
		i++
		if m.NeedsFlush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WritesToCommitLog {
		dAtA[i] = 0x18
		i++
		if m.WritesToCommitLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedsFilesetCleanup {
		dAtA[i] = 0x20
		i++
		if m.NeedsFilesetCleanup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedsRepair {
		dAtA[i] = 0x28
		i++
		if m.NeedsRepair {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RetentionOptions != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.RetentionOptions.Size()))
		n1, err := m.RetentionOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NeedsSnapshot {
		dAtA[i] = 0x38
		i++
		if m.NeedsSnapshot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Registry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Registry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for k, _ := range m.Namespaces {
			dAtA[i] = 0xa
			i++
			v := m.Namespaces[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovNamespace(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovNamespace(uint64(len(k))) + msgSize
			i = encodeVarintNamespace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintNamespace(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RetentionOptions) Size() (n int) {
	var l int
	_ = l
	if m.RetentionPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.RetentionPeriodNanos))
	}
	if m.BlockSizeNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockSizeNanos))
	}
	if m.BufferFutureNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BufferFutureNanos))
	}
	if m.BufferPastNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BufferPastNanos))
	}
	if m.BlockDataExpiry {
		n += 2
	}
	if m.BlockDataExpiryAfterNotAccessPeriodNanos != 0 {
		n += 1 + sovNamespace(uint64(m.BlockDataExpiryAfterNotAccessPeriodNanos))
	}
	return n
}

func (m *NamespaceOptions) Size() (n int) {
	var l int
	_ = l
	if m.NeedsBootstrap {
		n += 2
	}
	if m.NeedsFlush {
		n += 2
	}
	if m.WritesToCommitLog {
		n += 2
	}
	if m.NeedsFilesetCleanup {
		n += 2
	}
	if m.NeedsRepair {
		n += 2
	}
	if m.RetentionOptions != nil {
		l = m.RetentionOptions.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	if m.NeedsSnapshot {
		n += 2
	}
	return n
}

func (m *Registry) Size() (n int) {
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for k, v := range m.Namespaces {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNamespace(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNamespace(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNamespace(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNamespace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNamespace(x uint64) (n int) {
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetentionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPeriodNanos", wireType)
			}
			m.RetentionPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetentionPeriodNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeNanos", wireType)
			}
			m.BlockSizeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferFutureNanos", wireType)
			}
			m.BufferFutureNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferFutureNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPastNanos", wireType)
			}
			m.BufferPastNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferPastNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockDataExpiry = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDataExpiryAfterNotAccessPeriodNanos", wireType)
			}
			m.BlockDataExpiryAfterNotAccessPeriodNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockDataExpiryAfterNotAccessPeriodNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsBootstrap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsBootstrap = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsFlush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsFlush = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritesToCommitLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WritesToCommitLog = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsFilesetCleanup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsFilesetCleanup = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsRepair", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsRepair = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetentionOptions == nil {
				m.RetentionOptions = &RetentionOptions{}
			}
			if err := m.RetentionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsSnapshot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Registry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespaces == nil {
				m.Namespaces = make(map[string]*NamespaceOptions)
			}
			var mapkey string
			var mapvalue *NamespaceOptions
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNamespace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNamespace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNamespace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNamespace
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthNamespace
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NamespaceOptions{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNamespace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNamespace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Namespaces[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNamespace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNamespace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNamespace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("namespace.proto", fileDescriptorNamespace) }

var fileDescriptorNamespace = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0x42, 0x8b, 0x3b, 0x11, 0x8d, 0x59, 0x38, 0x44, 0x20, 0x59, 0x51, 0x40, 0x95,
	0x0f, 0x28, 0x82, 0x70, 0x41, 0xdc, 0xda, 0xd0, 0x72, 0x41, 0xa1, 0xda, 0x72, 0xea, 0x6d, 0x93,
	0x4e, 0xda, 0x55, 0x1d, 0xaf, 0xb5, 0x3b, 0x06, 0xc2, 0x93, 0xf0, 0x0e, 0xbc, 0x08, 0x12, 0x1c,
	0x78, 0x04, 0x14, 0x5e, 0x04, 0x79, 0xdc, 0x04, 0x67, 0x93, 0x43, 0x2f, 0x96, 0xf5, 0xcd, 0xbf,
	0x1e, 0xed, 0x37, 0x63, 0x68, 0x67, 0x6a, 0x86, 0x2e, 0x57, 0x13, 0xec, 0xe7, 0xd6, 0x90, 0x11,
	0x7b, 0x2b, 0xd0, 0xfb, 0xd5, 0x80, 0x48, 0x22, 0x61, 0x46, 0xda, 0x64, 0x1f, 0xf2, 0xf2, 0xe9,
	0xc4, 0x00, 0x1e, 0xd9, 0x25, 0x3b, 0x45, 0xab, 0xcd, 0xc5, 0x48, 0x65, 0xc6, 0x75, 0x82, 0x6e,
	0x90, 0x34, 0xe5, 0xd6, 0x9a, 0x38, 0x80, 0xfd, 0x71, 0x6a, 0x26, 0xd7, 0x67, 0xfa, 0x2b, 0x56,
	0xe9, 0x06, 0xa7, 0x3d, 0x2a, 0x9e, 0xc3, 0x83, 0x71, 0x31, 0x9d, 0xa2, 0x3d, 0x29, 0xa8, 0xb0,
	0x37, 0xd1, 0x26, 0x47, 0x37, 0x0b, 0x22, 0x81, 0x76, 0x05, 0x4f, 0x95, 0xa3, 0x2a, 0x7b, 0x97,
	0xb3, 0x3e, 0xe6, 0x64, 0xd9, 0xe9, 0xad, 0x22, 0x75, 0xfc, 0x25, 0xd7, 0x76, 0xde, 0xd9, 0xe9,
	0x06, 0x49, 0x28, 0x7d, 0x2c, 0xce, 0x21, 0xf1, 0xd0, 0xe1, 0x94, 0xd0, 0x8e, 0x0c, 0x1d, 0x4e,
	0x26, 0xe8, 0x5c, 0xfd, 0xc6, 0xbb, 0xdc, 0xec, 0xd6, 0xf9, 0xde, 0xcf, 0x06, 0x44, 0xa3, 0xa5,
	0xdc, 0xa5, 0xce, 0x03, 0xd8, 0xcf, 0x10, 0x2f, 0xdc, 0x91, 0x31, 0xe4, 0xc8, 0xaa, 0x9c, 0x45,
	0x86, 0xd2, 0xa3, 0x22, 0x06, 0x60, 0x72, 0x92, 0x16, 0xee, 0x8a, 0xf5, 0x85, 0xb2, 0x46, 0x4a,
	0x75, 0x9f, 0xad, 0x26, 0x74, 0x1f, 0xcd, 0xd0, 0xcc, 0x66, 0x9a, 0xde, 0x9b, 0x4b, 0x56, 0x17,
	0xca, 0xcd, 0x82, 0x78, 0x01, 0x0f, 0xab, 0xb3, 0x3a, 0x45, 0x87, 0x34, 0x4c, 0x51, 0x65, 0x45,
	0xce, 0xfa, 0x42, 0xb9, 0xad, 0x24, 0xba, 0xd0, 0x62, 0x2c, 0x31, 0x57, 0xda, 0xde, 0xe8, 0xab,
	0x23, 0xf1, 0x0e, 0x22, 0xeb, 0x2d, 0x0b, 0x2b, 0x6a, 0x0d, 0x9e, 0xf4, 0xff, 0x2f, 0x99, 0xbf,
	0x4f, 0x72, 0xe3, 0x90, 0x78, 0x06, 0xf7, 0xf9, 0xbb, 0x67, 0x99, 0xca, 0xdd, 0x95, 0xa1, 0xce,
	0x3d, 0x6e, 0xb6, 0x0e, 0x7b, 0xdf, 0x03, 0x08, 0x25, 0x5e, 0x6a, 0x47, 0x76, 0x2e, 0x86, 0x00,
	0xab, 0x16, 0xe5, 0x2a, 0x36, 0x93, 0xd6, 0xe0, 0xe9, 0x5a, 0xd7, 0x2a, 0xd8, 0x5f, 0xf9, 0x77,
	0xc7, 0x19, 0xd9, 0xb9, 0xac, 0x1d, 0x7b, 0x7c, 0x0e, 0x6d, 0xaf, 0x2c, 0x22, 0x68, 0x5e, 0xe3,
	0x9c, 0x47, 0xb2, 0x27, 0xcb, 0x57, 0xf1, 0x12, 0x76, 0x3e, 0xa9, 0xb4, 0x40, 0x1e, 0xc1, 0xfa,
	0xd5, 0xfc, 0xd9, 0xca, 0x2a, 0xf9, 0xa6, 0xf1, 0x3a, 0x38, 0x8a, 0x7e, 0x2c, 0xe2, 0xe0, 0xf7,
	0x22, 0x0e, 0xfe, 0x2c, 0xe2, 0xe0, 0xdb, 0xdf, 0xf8, 0xce, 0x78, 0x97, 0x7f, 0xb7, 0x57, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x67, 0xfa, 0xd1, 0xee, 0x81, 0x03, 0x00, 0x00,
=======
func init() { proto.RegisterFile("namespace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0x84, 0x16, 0x77, 0x22, 0x9a, 0xb0, 0x70, 0x88, 0x40, 0x42, 0x51, 0x40, 0x95,
	0x0f, 0x28, 0x82, 0x70, 0x41, 0xdc, 0x4a, 0x68, 0xb9, 0xa0, 0x50, 0x6d, 0x39, 0xf5, 0xb6, 0x71,
	0x27, 0xed, 0xaa, 0xce, 0xee, 0x6a, 0x77, 0x0c, 0x98, 0x57, 0xe2, 0x51, 0xe0, 0xa1, 0x90, 0xc7,
	0x4d, 0x70, 0x36, 0x3d, 0xf4, 0x62, 0x59, 0xdf, 0xfc, 0xeb, 0xd1, 0x7e, 0x33, 0x86, 0xbe, 0x51,
	0x2b, 0x0c, 0x4e, 0xe5, 0x38, 0x71, 0xde, 0x92, 0x15, 0x07, 0x1b, 0x30, 0xfe, 0xdb, 0x81, 0x81,
	0x44, 0x42, 0x43, 0xda, 0x9a, 0xaf, 0xae, 0x7e, 0x06, 0x31, 0x85, 0xa7, 0x7e, 0xcd, 0xce, 0xd0,
	0x6b, 0x7b, 0x39, 0x57, 0xc6, 0x86, 0x61, 0x32, 0x4a, 0xb2, 0xae, 0xbc, 0xb3, 0x26, 0x8e, 0xe0,
	0x70, 0x51, 0xd8, 0xfc, 0xe6, 0x5c, 0xff, 0xc2, 0x26, 0xdd, 0xe1, 0x74, 0x44, 0xc5, 0x6b, 0x78,
	0xbc, 0x28, 0x97, 0x4b, 0xf4, 0xa7, 0x25, 0x95, 0xfe, 0x36, 0xda, 0xe5, 0xe8, 0x6e, 0x41, 0x64,
	0xd0, 0x6f, 0xe0, 0x99, 0x0a, 0xd4, 0x64, 0x1f, 0x70, 0x36, 0xc6, 0x9c, 0xac, 0x3b, 0x7d, 0x52,
	0xa4, 0x4e, 0x7e, 0x3a, 0xed, 0xab, 0xe1, 0xde, 0x28, 0xc9, 0x52, 0x19, 0x63, 0x71, 0x01, 0x59,
	0x84, 0x8e, 0x97, 0x84, 0x7e, 0x6e, 0xe9, 0x38, 0xcf, 0x31, 0x84, 0xf6, 0x8d, 0xf7, 0xb9, 0xd9,
	0xbd, 0xf3, 0xe3, 0x3f, 0x1d, 0x18, 0xcc, 0xd7, 0x72, 0xd7, 0x3a, 0x8f, 0xe0, 0xd0, 0x20, 0x5e,
	0x86, 0x8f, 0xd6, 0x52, 0x20, 0xaf, 0x1c, 0x8b, 0x4c, 0x65, 0x44, 0xc5, 0x0b, 0x00, 0x26, 0xa7,
	0x45, 0x19, 0xae, 0x59, 0x5f, 0x2a, 0x5b, 0xa4, 0x56, 0xf7, 0xc3, 0x6b, 0xc2, 0xf0, 0xcd, 0xce,
	0xec, 0x6a, 0xa5, 0xe9, 0x8b, 0xbd, 0x62, 0x75, 0xa9, 0xdc, 0x2d, 0x88, 0x37, 0xf0, 0xa4, 0x39,
	0xab, 0x0b, 0x0c, 0x48, 0xb3, 0x02, 0x95, 0x29, 0x1d, 0xeb, 0x4b, 0xe5, 0x5d, 0x25, 0x31, 0x82,
	0x1e, 0x63, 0x89, 0x4e, 0x69, 0x7f, 0xab, 0xaf, 0x8d, 0xc4, 0x67, 0x18, 0xf8, 0x68, 0x59, 0x58,
	0x51, 0x6f, 0xfa, 0x7c, 0xf2, 0x7f, 0xc9, 0xe2, 0x7d, 0x92, 0x3b, 0x87, 0xc4, 0x2b, 0x78, 0xc4,
	0xdf, 0x3d, 0x37, 0xca, 0x85, 0x6b, 0x4b, 0xc3, 0x87, 0xdc, 0x6c, 0x1b, 0x8e, 0x7f, 0x27, 0x90,
	0x4a, 0xbc, 0xd2, 0x81, 0x7c, 0x25, 0x66, 0x00, 0x9b, 0x16, 0xf5, 0x2a, 0x76, 0xb3, 0xde, 0xf4,
	0xe5, 0x56, 0xd7, 0x26, 0x38, 0xd9, 0xf8, 0x0f, 0x27, 0x86, 0x7c, 0x25, 0x5b, 0xc7, 0x9e, 0x5d,
	0x40, 0x3f, 0x2a, 0x8b, 0x01, 0x74, 0x6f, 0xb0, 0xe2, 0x91, 0x1c, 0xc8, 0xfa, 0x55, 0xbc, 0x85,
	0xbd, 0xef, 0xaa, 0x28, 0x91, 0x47, 0xb0, 0x7d, 0xb5, 0x78, 0xb6, 0xb2, 0x49, 0x7e, 0xe8, 0xbc,
	0x4f, 0x16, 0xfb, 0xfc, 0x73, 0xbd, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x18, 0x85, 0x83,
	0x6f, 0x03, 0x00, 0x00,
>>>>>>> Regen protobufs after rebase
}
